#|

KECK LRIS in imaging mode

LRIS has a red side and a blue side (after about year 2000).

LRIS went through many iterations, and it is too difficult to address them all.

A history of red-side iterations is here:
  http://web.archive.org/web/20160612090150/http://www2.keck.hawaii.edu/inst/lris_OLD.060515/ccd.html
After 2009 (?), the red side moved from 1 CCD to 2
  https://www2.keck.hawaii.edu/koa/public/lris/lris_data_form.html

According to this last page, the FITS format moved from simple to 2 extension.

The modern CCDs are described here:
  https://www2.keck.hawaii.edu/inst/lris/detectors.html

 there is a WINDOW header but it has 5 terms that don't agree with image size.
 eg WINDOW=0,0,0,2048,2048 for an image with NAXIS1=2148 NAXIS2=2048  in the first generation.


|#


(in-package instrument-id)

;; parent class - could be a onechip (old) or multipchip (new)
(defclass %keck-lris (imaging-instrument)
    ((name :initform "Keck LRIS")
     (observatory :initform "mko")
     (aperture :initform 10.0)
     ;; NO GAIN KEYWORD - gain seems to be 3.3 for default amp B according to p16 of manual
     ;; manual says they are basically linear to truncatin limit
     (saturation-level :initform 65535)
     (non-linear-level :initform 60000)))

(defclass %lris-red-mixin () ())
(defclass %lris-blue-mixin () ())

;; the modern (c.2017) chips for which docs are still valid
(defclass %keck-lris-v2 (%keck-lris) ())

(defclass/inst keck-lris-red-2chip-v2
  (%keck-lris-v2 multichip %lris-red-mixin) ())
(defclass/inst keck-lris-blue-2chip-v2
  (%keck-lris-v2 multichip %lris-blue-mixin) ())

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; the old version with one 2148x2048 chip, probably valid before 2003?
;; we probably need more examples here.
(defclass/inst %keck-lris-red-v1 (%keck-lris %lris-red-mixin onechip) ())

(defclass/inst keck-lris-red-v1-1 (%keck-lris-red-v1)
  ((saturation-level :initform 65535)
   (non-linear-level :initform 60000)))

;; the old version with one 2250x2048 chip, probably valid before 2003?
;; we probably need more examples here.
(defclass/inst keck-lris-red-v1-2 (%keck-lris-red-v1)
  ((saturation-level :initform 65535)
   (non-linear-level :initform 60000)))
  
(defclass/inst keck-lris-unknown (%keck-lris)
  ((why-unknown :initform nil :initarg :why :accessor keck-lris-why-unknown)))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  
;;  a hack to ID un-named LRIS
(defun %horrid-old-lris-identificator (fits-file)
  (and (cf:read-fits-header fits-file "GRANAME")
       (cf:read-fits-header fits-file "GRANGLE")
       ;(cf:read-fits-header fits-file "CALNAME");; not universal
       (cf:read-fits-header fits-file "ROTPPOSN")
       (cf:read-fits-header fits-file "ROTPOSN")
       (cf:read-fits-header fits-file "TTIME")
       (cf:read-fits-header fits-file "TUBETEMP")
       (cf:read-fits-header fits-file "EL")
       (cf:read-fits-header fits-file "TRAPDOOR")
       (cf:read-fits-header fits-file "REDFOCUS")
       (loop for h in (cf:read-fits-header-list fits-file)
	     when (and (equalp (first h) "COMMENT")
		       (search "generated by the Low Resolution Imaging"
			       (second h) :test 'equalp))
	       do (return t)
	     finally (return nil))))
       

(defun %keck-lris-identify-instrument (fits-file)
  (when (and
	 ;; identify if in imaging mode, and also trigger lris detection
	 (equalp (cf:read-fits-header fits-file "GRANAME") "mirror")
	 (or  ;; the new easier to ID LRIS
	  (and
	   (equalp (cf:read-fits-header fits-file "PONAME") "LRIS") 
	   (equalp (cf:read-fits-header fits-file "TELESCOP") "Keck II"))
	  ;; resort to the horrid identifier
	  (%horrid-old-lris-identificator fits-file)))

    (let* ((date-string (cf:read-fits-header fits-file "DATE"))
	   (naxis1 (cf:read-fits-header fits-file "NAXIS1"))
	   (naxis2 (cf:read-fits-header fits-file "NAXIS2"))
	   ;; if TRIM is set, then data are reduced and we can't use
	   ;; pixel sizes
	   (trim   (cf:read-fits-header fits-file "TRIM"))
	   (binning (ignore-errors (%lris-get-binning fits-file)))
	   (b1 (first binning)) ;; can be NIL
	   (b2 (second binning))
	   ;; original pixel numbers of array (assuming no WINDOW)
	   (nxpix (when binning (* b1 naxis1)))
	   (nypix (when binning (* b2 naxis2)))
	   (redfilt (cf:read-fits-header fits-file "REDFILT"))
	   ;(bluefilt (cf:read-fits-header fits-file "BLUEFILT"))
	   (date (or ;; date format varies.  Thank you, engineers.
		  (ignore-errors ;; eg convert "1999-02-03" to  19920203
		   (astro-time:parse-yy/mm/dd-string
		    date-string
		    :separator-char (if (find #\/ date-string) #\/ #\-) ;; varies
		    :output :integer))
		  (ignore-errors ;; eg convert "31/01/97" to  19970131
		   (astro-time:parse-dd/mm/yy-string
		    date-string
		    :separator-char (if (find #\/ date-string) #\/ #\-) ;; varies
		    :output :integer)))))

      ;; we naively supposed that before 2002-01-01 LRIS had a single
      ;; red chip.  This is probably wrong.  we calso can't
      ;; accommodate WINDOW that doesn't cover wholechip

      (cond
	((or (not binning) (not date) (not b1) (not b2))
	 (make-instance
	  'keck-lris-unknown
	  :why (remove nil (list (when (not (and binning b1 b2))
				   "No valid BINNING header")
				 (when (not date) "No valid DATE header")))))
	;;
	;; https://www2.keck.hawaii.edu/koa/public/lris/lris_data_form.html
	((< date 20090601) 
	 (cond ((and redfilt  (= nxpix 2148)  (= nypix 2048))
		(make-instance 'keck-lris-red-v1-1
			       :chip-id (%lris-get-chip-id-for-fits fits-file)))
	       ((and redfilt
		     (or trim ;; reduced so can't use size to discriminate
			 (and (= nxpix 2250)
			      ;; the web page says 2250x2048, we see 2250x2068
			      ;; so we allow both
			      (or (= nypix 2048)
				  (= nypix 2068)))))
		(make-instance 'keck-lris-red-v1-2
			       :chip-id (%lris-get-chip-id-for-fits fits-file)))
	       (t
		(make-instance
		 'keck-lris-unknown
		 ;; explain why this is an unknown lris
		 :why (remove
		       nil
		       (list 
			(when (not redfilt)
			  "No REDFILT but before 2002-01-01")
			(when (not (and (= nxpix 2148)
					(= nypix 2048)))
			  (format
			   nil
			   "original size ~A,~A not 2148x2048 before 2002-01-01"
			   nxpix nypix))))))))
	((>= date 20020101) ;; after 2002-01-01 assume we have double-chip cameras
	 (make-instance 'keck-lris-unknown
			:why '("We don't understand post-2009 multi-chip LRIS yet"))
	 #+nil
	 (cond (redfilt
		(make-instance 'keck-lris-red
			       :chip-id (%lris-get-chip-id-for-fits fits-file)))
	       (bluefilt ;; a guess - we've never seen this header
		(make-instance 'keck-lris-blue
			       :chip-id (%lris-get-chip-id-for-fits fits-file)))
	       (t
		(make-instance
		 'keck-lris-unknown
		 :why "No REDFILT or BLUEFILT after 2002-01-01"))))))))
	  


(%add-instrument-id-function '%keck-lris-identify-instrument)


(defmethod get-critical-headers-for-instrument ((inst %keck-lris)
						fits-file)
  (declare (ignore inst fits-file))
  (remove-duplicates
   (append
    '("GRANAME" "GRANGLE" "ROTPPOSN" "ROTPOSN" "TTIME" "TUBETEMP"
      "EL" "TRAPDOOR" "REDFOCUS" "PONAME" "TELESCOP" "EXPOSURE"
      "WINDOW" "AMPLIST")
    (call-next-method))
   :test 'equalp))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod get-standard-filter-for-instrument ((inst %keck-lris-red-v1) fits-file)
  (let ((filter (cf:read-fits-header fits-file "REDFILT")))
    (cond ((equalp filter "U") :uj)
	  ((equalp filter "V") :vj) 
	  ((equalp filter "G") :gsdss) ;; we hope
	  ((equalp filter "B") :bj)
	  ((equalp filter "R") :rc)
	  ((equalp filter "I") :ic)
	  (t NIL))))
	   

(defmethod get-exptime-for-instrument ((inst %keck-lris) fits-file)
  (declare (ignorable inst))
  (%gethead-or-error fits-file "EXPOSURE"))

(defmethod get-object-for-instrument ((inst %keck-lris) fits-file)
  (declare (ignorable inst))
  (%gethead-or-error fits-file "OBJECT"))

(defmethod get-object-type-for-instrument ((inst %keck-lris) fits-file)
  (let ((object   (%gethead-or-error  fits-file  "OBJECT"))
	(exptime   (%gethead-or-error  fits-file  "EXPOSURE")))
    (cond
      ((and (equalp "BIAS" object)  (zerop exptime))
       :BIAS)
      ((search "FLAT" object :test 'equalp)
       :FLAT)
      ;; take it on blind faith that anything else is an object
      (t
       :OBJECT))))

;; awkward old-style date plus UT time
(defmethod get-mjd-start-for-instrument ((inst %keck-lris) fits-file)
  (declare (ignorable inst))
  (let* ((dstring0 (%gethead-or-error fits-file "DATE")) ;; in 04/03/87 format
	 ;; in some later versions, "/" turns into "-", so force it back
	 ;; into the old format
	 (dstring (substitute #\/ #\- dstring0))
	 ;; fixdate is like "1987-03-04"
	 (fixdate (astro-time:parse-dd/mm/yy-string dstring :output :string)) 
	 (ut (%gethead-or-error fits-file "UT"))
	 (ut-string (concatenate 'string fixdate "T" ut)))
    (astro-time:parse-ut-date-and-time-string-to-mjd ut-string)))

(defmethod get-mjd-mid-for-instrument ((inst %keck-lris) fits-file)
  (+ (get-mjd-start-for-instrument inst fits-file)
     (* 0.5d0 (/ (%gethead-or-error fits-file "EXPOSURE") 24d0 3600d0))))

;; see https://www2.keck.hawaii.edu/inst/lris/gain_readnoise.html
;; the problem is that there are multiple amps, and many epochs, so this
;; is APPROXIMATE
(defmethod get-gain-for-instrument ((inst %keck-lris-v2) fits-file &key extension)
  (declare (ignorable fits-file extension))
  (cond ((typep inst 'keck-lris-red-2chip-v2)
	 1.2d0)
	((typep inst 'keck-lris-blue-2chip-v2)
	 1.7d0)))

;; gain changed as electronics were replaced, and it varies for left/right chips
;; http://web.archive.org/web/20161101145825/http://www2.keck.hawaii.edu/inst/lris_OLD.060515/ccd.html
(defmethod get-gain-for-instrument ((inst %keck-lris-red-v1) fits-file &key extension)
  (declare (ignorable fits-file extension))
  (let ((date (astro-time:parse-dd/mm/yy-string
	       (substitute
		#\/ #\- ;; sometimes DD/MM/YY and sometimes DD-MM-YY
		(%gethead-or-error fits-file "DATE"))
	       :output :integer)))
  (cond ((<= date 19951017)
	 2.19d0)
	((<= date 19951115)
	 1.40d0)
	((<= date 19960624)
	 2.0d0) ;; 1.83 and 2.16 - big variation between sides
	((<= date 20020508)
	 2.03d0)
	((<= date 20030729)
	 1.41d0)
	((<= date 20030807) ;; web page is confusing here (with a period in June 10 to 13)
	 2.10d0)            ;;  but 2.10 is close enough for both epochs
	(t
	 (error "Cannot get keck-lris-red-v1-1 gain for date ~A" date)))))

  

(defun %lris-get-binning (fits-file)
  (let* ((bstring (remove #\space (%gethead-or-error fits-file "BINNING"))))
    (cond ((equalp bstring "1,1") (list 1 1))
	  ((equalp bstring "2,2") (list 2 2))
	  ((equalp bstring "1,2") (list 1 2))
	  ((equalp bstring "2,1") (list 2 1))
	  (t (error "Invalid LRIS binning ~A" bstring)))))

;; unfortunately, we don't know what this means!
(defun %lris-get-window (fits-file)
  (let* ((wstring (string-utils:split-string
		   (%gethead-or-error fits-file "WINDOW")
		   ",")))
    (or (ignore-errors (mapcar 'parse-integer wstring))
	(error "Failed to parse LRIS WINDOW=~A" wstring))))




(defmethod get-datasec-for-instrument ((inst keck-lris-red-v1-1) fits-file &key extension)
  (declare (ignore extension inst))
  (let* ((binning (%lris-get-binning fits-file))
	 (b1 (first binning))
	 (b2 (second binning)))
    (when (not (= b1 b2 1))
      (error "We don't know how to get DATASEC for KECK-LRIS-RED when binning is not 1,1")))
  (let ((naxis1 (%gethead-or-error fits-file "NAXIS1"))	
	(naxis2 (%gethead-or-error fits-file "NAXIS2")))
    (when (or (not (= naxis1 2148))
	      (not (= naxis2 2048)))
      (error
       "We don't  know how to get DATASEC for KECK-LRIS-RED when NAXIS1,NAXIS2 is not 2148,2048"))
    ;; this is the only instance we're confident about
    (vector 219 1876 1 2048)))
  

;; amps 1,2 live on chip 1, and amps 3,4 live on chip 2, but there exists a
;; single amp mode as well as dual readouts
(defmethod get-chip-id-for-instrument
    ((inst %keck-lris) fits-file &key extension)
  (declare (ignorable inst extension))
  (%lris-get-chip-id-for-fits fits-file))
  
(defun %lris-get-chip-id-for-fits (fits-file)
  (let* ((amplist (cf:read-fits-header fits-file "AMPLIST")))
    (cond ((not amplist) ;; must be really old camera - just 1 chip?
	   1)
	  (t
	   (let ((is-1 (or (find #\1  amplist)
			   (find #\2  amplist)))
		 (is-2 (or (find #\3  amplist)
			   (find #\4  amplist))))
	     (when (or (and is-1 is-2)         ;; not both
		       (not (or is-1 is-2)))  ;; but at least one
	       (error "Can't identify LRIS chip from AMPLIST=~A" amplist))
	     (if is-1 1 2)))))) ;; return 1 or 2
	  
;; FIXME - pixel scale vary for generation of instrument

;; same values for blue side, but we keep 2 separate functions
#+nil
(defmethod  get-pixel-scale-for-instrument ((inst %keck-lris-v2) fits-file
					    &key extension)
  (declare (ignore extension inst))
  (let* ((blist  (%lris-get-binning fits-file))
	 (b1 (first blist))
	 (b2 (second blist)))
    (when (not (= b1 b2))
      (error "Cannot define a single LRIS pixel scale when BINNING=~A,~A" b1 b2))
    (* b1 0.135))) 

(defmethod  get-pixel-scale-for-instrument ((inst %keck-lris-red-v1) fits-file
					    &key extension)
  (declare (ignore extension inst))
  (let* ((blist  (%lris-get-binning fits-file))
	 (b1 (first blist))
	 (b2 (second blist)))
    (when (not (= b1 b2))
      (error "Cannot define a single LRIS pixel scale when BINNING=~A,~A" b1 b2))
    (* b1 0.213)))  ;; https://www2.keck.hawaii.edu/koa/public/lris/lris_data_form.html


    
            
#|

 ==== Initial WCS ===

the web page https://www2.keck.hawaii.edu/inst/lris/detectors.html
says that PA=ROTPOSN+90

But

"These orientations apply only to the LRIS image displays at the
telescope. On the blue side the image is rotated 270 degrees and has
the x-axis flipped. On the red side, the image is rotated 270 degrees
and has the y-axis flipped. The entry below shows the LRIS SPECIFIC
ds9 display."

But when the images are viewed with no rotations and flips (see bottom pics on page)

PA=0, (hence ROTPOSN=-90??)

BLUE:   +Y=West, +X=North   - then 
RED:    +Y=West  +X=North

This is sort of difficult to understand.   A red image with ROTPOSN=-83 in truth
has +X=West, +Y=North.   Perhaps by PA=0 they mean ROTPOSN=0, and they're mixing
concepts of PA and ROTPOSN?

The fact is that the red code below seems to work dandy.  This should provide a guide
to getting blue code to work.   In fact, red/blue appear to be identical except
that images (not axes) are flipped in web page.

|#
(defun %lris-v1-red-get-initial-wcs (fits-file)
  (let* ((ra-string (%gethead-or-error fits-file "RA"))
	 (dec-string (%gethead-or-error fits-file "Dec"))
	 (ra (ra-dec:hms-string->deg ra-string))
	 (dec  (ra-dec:dms-string->deg dec-string))
	 ;; get the chip binning from BINNING
	 (bins (%lris-get-binning fits-file))
	 (bin1 (first bins))
	 (bin2 (second bins))
	 (pixscale 0.213) ;; https://www2.keck.hawaii.edu/koa/public/lris/lris_data_form.html
	 ;; scales are valid for both red and blue sides according to manual
	 (degpix1 (* pixscale bin1 #.(/ 1d0 3600d0))) 
	 (degpix2 (* pixscale bin2 #.(/ 1d0 3600d0)))
	 (naxis1 (%gethead-or-error fits-file "NAXIS1"))
	 (naxis2 (%gethead-or-error fits-file "NAXIS2"))
	 (equinox 2000d0) ;; nothing in header.  Pray to Jesus that it is always 2000.
	 (rotposn  (%gethead-or-error fits-file "ROTPOSN"))
	 ;; manual seems to say that PA=ROTPOSN+90
	 (pa (* (/ pi 180) (+ 90d0 rotposn))) ;; PA in radians
	 (cospa (cos pa))
	 (sinpa (sin pa))
	 (xflip -1)
	 (yflip +1)
	 ;;(yflip -1)
	 ;; we HOPE this adjustment to field center is universal, being based on one image
	 (crpix1 (+ 543 (* 0.5d0 naxis1)))
	 (crpix2 (+ 191 (* 0.5d0 naxis2))))
    (wcs:make-wcs-radec-tan
     :crval1 ra
     :crval2 dec
     :crpix1 crpix1
     :crpix2 crpix2
     :cd1_1  (* xflip +1   degpix1 cospa)
     :cd2_2  (* yflip +1   degpix2 cospa) 
     :cd1_2  (* xflip -1   degpix1 sinpa)
     :cd2_1  (* yflip +1   degpix2 sinpa)
     :equinox equinox)))

(defmethod get-initial-wcs-for-instrument ((inst keck-lris-red-v1-1) fits-file
					   &key extension)
  (declare (ignore inst extension))
  (%lris-v1-red-get-initial-wcs fits-file))

(defmethod get-initial-wcs-for-instrument ((inst keck-lris-red-v1-2) fits-file
					   &key extension)
  (declare (ignore inst extension))
  (%lris-v1-red-get-initial-wcs fits-file))

#+nil
;; unfortunately we found images with a RA,DEC that was a half a degree from claimed
(defmethod get-initial-wcs-for-instrument ((inst keck-lris-red-v1-2) fits-file
					   &key extension)
  (declare (ignore extension))
  (let* ((ra-string (%gethead-or-error fits-file "RA"))
	 (dec-string (%gethead-or-error fits-file "Dec"))
	 (ra (ra-dec:hms-string->deg ra-string))
	 (dec  (ra-dec:dms-string->deg dec-string))
	 ;; get the chip binning from BINNING
	 (bins (%lris-get-binning fits-file))
	 (bin1 (first bins))
	 (bin2 (second bins))
	 (pixscale 0.213) ;; https://www2.keck.hawaii.edu/koa/public/lris/lris_data_form.html
	 ;; scales are valid for both red and blue sides according to manual
	 (degpix1 (* pixscale bin1 #.(/ 1d0 3600d0))) 
	 (degpix2 (* pixscale bin2 #.(/ 1d0 3600d0)))
	 (naxis1 (%gethead-or-error fits-file "NAXIS1"))
	 (naxis2 (%gethead-or-error fits-file "NAXIS2"))
	 (equinox 2000d0) ;; nothing in header.  Pray to Jesus that it is always 2000.
	 (rotposn  (%gethead-or-error fits-file "ROTPOSN"))
	 ;; manual seems to say that PA=ROTPOSN+90
	 (pa (* (/ pi 180) (+ 90d0 rotposn))) ;; PA in radians
	 (cospa (cos pa))
	 (sinpa (sin pa))
	 (xflip -1)
	 (yflip +1)
	 ;; we HOPE this adjustment to field center is universal, being based on one image
	 (crpix1 (+ 543 (* 0.5d0 naxis1)))
	 (crpix2 (+ 191 (* 0.5d0 naxis2))))

    (wcs:make-wcs-radec-tan
     :crval1 ra
     :crval2 dec
     :crpix1 crpix1
     :crpix2 crpix2
     :cd1_1  (* xflip +1   degpix1 cospa)
     :cd2_2  (* yflip +1   degpix2 cospa) 
     :cd1_2  (* xflip -1   degpix1 sinpa)
     :cd2_1  (* yflip +1   degpix2 sinpa)
     :equinox equinox))) 
            


(defmethod insert-initial-wcs-for-instrument ((inst %keck-lris) fits-file
					       &key extension)
  (when (not (cf:read-wcs fits-file))
    (cf:write-wcs (get-initial-wcs-for-fits fits-file)
		  fits-file :extension extension)))






